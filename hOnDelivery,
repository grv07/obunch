[1mdiff --git a/Cargo.lock b/Cargo.lock[m
[1mindex e2e3bc6..cc6efff 100644[m
[1m--- a/Cargo.lock[m
[1m+++ b/Cargo.lock[m
[36m@@ -967,6 +967,7 @@[m [mversion = "0.1.0"[m
 dependencies = [[m
  "actix-web",[m
  "serde",[m
[32m+[m[32m "uuid",[m
 ][m
 [m
 [[package]][m
[36m@@ -1616,6 +1617,15 @@[m [mdependencies = [[m
  "percent-encoding",[m
 ][m
 [m
[32m+[m[32m[[package]][m
[32m+[m[32mname = "uuid"[m
[32m+[m[32mversion = "0.8.2"[m
[32m+[m[32msource = "registry+https://github.com/rust-lang/crates.io-index"[m
[32m+[m[32mchecksum = "bc5cf98d8186244414c848017f0e2676b3fcb46807f6668a97dfe67359a3c4b7"[m
[32m+[m[32mdependencies = [[m
[32m+[m[32m "serde",[m
[32m+[m[32m][m
[32m+[m
 [[package]][m
 name = "version_check"[m
 version = "0.9.3"[m
[1mdiff --git a/Cargo.toml b/Cargo.toml[m
[1mindex 870047e..0ff685c 100644[m
[1m--- a/Cargo.toml[m
[1m+++ b/Cargo.toml[m
[36m@@ -8,3 +8,4 @@[m [medition = "2018"[m
 [dependencies][m
 actix-web = "3"[m
 serde = { version = "1.0", features = ["derive"] }[m
[32m+[m[32muuid = { version = "0.8", features = ["serde", "v1"] }[m
[1mdiff --git a/src/errors.rs b/src/errors.rs[m
[1mdeleted file mode 100644[m
[1mindex 0c68011..0000000[m
[1m--- a/src/errors.rs[m
[1m+++ /dev/null[m
[36m@@ -1,9 +0,0 @@[m
[31m-struct ErrorFmt {[m
[31m-    msg: String,[m
[31m-    code: i32,[m
[31m-}[m
[31m-[m
[31m-enum AuthError {[m
[31m-    LoginErr(ErrorFmt),[m
[31m-    TokenExpire(ErrorFmt),[m
[31m-}[m
[1mdiff --git a/src/main.rs b/src/main.rs[m
[1mindex c0852b5..8bd207f 100644[m
[1m--- a/src/main.rs[m
[1m+++ b/src/main.rs[m
[36m@@ -1,43 +1,17 @@[m
[31m-mod errors;[m
[31m-mod models;[m
[31m-[m
[31m-use actix_web::{get, post, web, App, HttpResponse, HttpServer, Responder};[m
[31m-use models::User;[m
[31m-[m
[31m-// TODO: Make it seprate trait/module.[m
[31m-mod auth {[m
[31m-    use serde::Deserialize;[m
[31m-    #[derive(Deserialize)][m
[31m-    pub struct Login {[m
[31m-        pub name: String,[m
[31m-        password: String,[m
[31m-    }[m
[31m-}[m
[31m-[m
[31m-#[get("/")][m
[31m-async fn hello() -> impl Responder {[m
[31m-    HttpResponse::Ok().body("Hello")[m
[31m-}[m
[31m-[m
[31m-#[post("/create")][m
[31m-async fn create_user(user: web::Json<User>) -> impl Responder {[m
[31m-    // Make a create user call.[m
[31m-    format!("data: {:?}\n", user.name)[m
[31m-}[m
[31m-[m
[31m-#[post("/login")][m
[31m-async fn login(login: web::Json<auth::Login>) -> impl Responder {[m
[31m-    format!("pass: {:?} \n", login.name)[m
[31m-}[m
[32m+[m[32muse actix_web::{get, delete, post, web, App, HttpResponse, HttpServer, Responder};[m
 [m
 // This can be inside an module/crate or lib.[m
 fn config(cfg: &mut web::ServiceConfig) {[m
[31m-    let authscope = web::scope("/user").service(create_user);[m
[31m-    cfg.service(authscope);[m
[32m+[m[32m    let auth_scope = web::scope("/user").service(create_user);[m
[32m+[m[32m    let order_scope = web::scope("/user").service(create_user);[m
[32m+[m[32m    let menu_scope = web::scope("/user").service(create_user);[m
[32m+[m[32m    let shop_scope = web::scope("/user").service(create_user);[m
[32m+[m[32m    cfg.service(auth_scope);[m
 }[m
 [m
 #[actix_web::main][m
 async fn main() -> std::io::Result<()> {[m
[31m-    let app = || App::new().service(hello).service(login).configure(config);[m
[32m+[m[32m    let app = || App::new().configure(config);[m
     HttpServer::new(app).bind("127.0.0.1:8080")?.run().await[m
 }[m
[41m+[m
[1mdiff --git a/src/models.rs b/src/models.rs[m
[1mdeleted file mode 100644[m
[1mindex 922adf1..0000000[m
[1m--- a/src/models.rs[m
[1m+++ /dev/null[m
[36m@@ -1,41 +0,0 @@[m
[31m-use serde::Deserialize;[m
[31m-[m
[31m-fn default_fk() -> String {[m
[31m-    "NA".to_string()[m
[31m-}[m
[31m-[m
[31m-fn default_phone() -> String {[m
[31m-    "NA".to_string()[m
[31m-}[m
[31m-[m
[31m-#[derive(Deserialize)][m
[31m-pub struct User {[m
[31m-    pub name: String,[m
[31m-    email: String,[m
[31m-    #[serde(default = "default_phone")][m
[31m-    phone: String,[m
[31m-    #[serde(default = "default_fk")][m
[31m-    addr_id: String,[m
[31m-}[m
[31m-[m
[31m-struct Address {[m
[31m-    text: String,[m
[31m-}[m
[31m-[m
[31m-struct Item {[m
[31m-    title: String,[m
[31m-    price: f64,[m
[31m-    is_available: bool,[m
[31m-}[m
[31m-[m
[31m-enum PaymentType {[m
[31m-    CashOnDelivery,[m
[31m-    PrePaid,[m
[31m-}[m
[31m-[m
[31m-struct Order {[m
[31m-    item_id: String,[m
[31m-    total_price: i64,[m
[31m-    owner: String,[m
[31m-    payment_type: PaymentType,[m
[31m-}[m
[1mdiff --git a/src/request_models.rs b/src/request_models.rs[m
[1mdeleted file mode 100644[m
[1mindex dd72f77..0000000[m
[1m--- a/src/request_models.rs[m
[1m+++ /dev/null[m
[36m@@ -1,7 +0,0 @@[m
[31m-use serde::Deserialize;[m
[31m-[m
[31m-#[derive(Deserialize)][m
[31m-pub struct User {[m
[31m-   pub name: String,[m
[31m-    email: String,[m
[31m-}[m
